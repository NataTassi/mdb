What is Node.js:

Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on 
the V8 engine (Chrome's JavaScript runtime) and executes JavaScript code outside a web browser. 
Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and 
efficient, perfect for data-intensive real-time applications that run across distributed devices.
A common task for a web server can be to open a file on the server and return the content to the client.

Here is how Node.js handles a file request:
1. Sends the task to the computer's file system.
2. Ready to handle the next request.
3. When the file system has opened and read the file, the server returns the content to the client.

Node.js eliminates the waiting, and simply continues with the next request.
Node.js runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient.
Node.js can generate dynamic page content, manage files on the server, interact with your database or receive user data.


Package managers:

- npm:
npm is the default package manager for the JavaScript runtime environment Node.js. It consists of a command line client, also called npm, and an online database of public and paid-for private packages, called the npm registry. 

Main commands: install, uninstall, ls

Read: 
https://stackoverflow.com/questions/52499617/what-is-the-difference-between-npm-install-and-npm-ci
https://stackoverflow.com/questions/36022926/what-do-the-save-flags-do-with-npm-install

By default, 'npm install' will install all modules listed as dependencies in package.json.
With the --production flag (or when the NODE_ENV environment variable is set to production), npm will not install modules listed in devDependencies.

- Yarn:
Yarn is a software packaging system developed in 2016 by Facebook for the Node.js JavaScript runtime environment. An alternative to the NPM package manager, Yarn was created as a collaboration of Facebook, Exponent, Google, and Tilde to solve consistency, security, and performance problems with large codebases.


package.json file:

The package.json file is kind of a manifest for your project. It can do a lot of things, completely unrelated. It's a central repository of configuration for tools, for example. It's also where npm and yarn store the names and versions for all the installed packages.


Specifying dependencies:

To specify the packages your project depends on, you must list them as "dependencies" or "devDependencies" in your package's package.json file. When you run npm install, npm will download dependencies and devDependencies that are listed in package.json that meet the semantic version requirements listed for each. To see which versions of a package will be installed, use the semver calculator.

"dependencies": Packages required by your application in production.
"devDependencies": Packages that are only needed for local development and testing.

~version “Approximately equivalent to version”, will update you to all future patch versions, without incrementing the minor version. ~1.2.3 will use releases from 1.2.3 to <1.3.0.
^version “Compatible with version”, will update you to all future minor/patch versions, without incrementing the major version. ^2.3.4 will use releases from 2.3.4 to <3.0.0.


package-lock.json file:
The goal of package-lock.json file is to keep track of the exact version of every package that is installed so that a product is 100% reproducible in the same way even if packages are updated by their maintainers. npm will use those exact versions when running npm ci. This solves a very specific problem that package.json left unsolved. In package.json you can set which versions you want to upgrade to (patch or minor), using the semver notation.


node_modules folder:
You can think of the node_modules folder like a cache for the external modules that your project depends upon. When you npm install them, they are downloaded from the web and copied into the node_modules folder and Node.js is trained to look for them there when you import them (without a specific path). I refer to it as a cache because the node_modules folder can be entirely recreated from scratch at any time by just reinstalling all the dependent modules (that should be listed in your project folders).
This is because there's no reason to store copies of all your dependent modules in your own GitHub project. The exact version you were using is known and stored in your package.json or package-lock.json so at any time you or anyone else using your project can download your code and then retch all the other dependent modules from their original source (including even the exact same versions you were using). So, there isn't any reason to store a separate duplicate copy of all those dependent modules in your own project. That would just be wasteful and would complicate upgrading to a newer version of all those dependent modules.


How to update each dependency in package.json to the latest version?

npm-check-updates upgrades your package.json dependencies to the latest versions, ignoring specified versions.
Maintains existing semantic versioning policies, i.e. "react": "^16.0.4" to "react": "^18.2.0".
Only modifies package.json file. Run npm install to update your installed packages and package-lock.json.
# Install the npm-check-updates package globally
npm i -g npm-check-updates
# Update package.json file
ncu -u
# Install updates
npm install


Packages:
- Prettier: opinionated code formatter, enforces a consistent style.
- Jest: JavaScript testing.
- Nodemon: restarts node apps when file changes in the directory are detected.
- Wait-port: simple binary to wait for a port to open.


Docker image:
See https://github.com/nodejs/docker-node
About node:alpine image variant: 
Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed